
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.7.0
 * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
 */
Prisma.prismaVersion = {
  client: "6.7.0",
  engine: "3cff47a7f5d65c3ea74883f1d736e41d68ce91ed"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  username: 'username',
  email: 'email',
  password: 'password',
  mobile: 'mobile',
  country: 'country',
  role: 'role',
  profilePic: 'profilePic',
  profileThumbnail: 'profileThumbnail',
  lastLogin: 'lastLogin',
  resetPasswordToken: 'resetPasswordToken',
  resetPasswordExpires: 'resetPasswordExpires',
  otp: 'otp',
  otpExpires: 'otpExpires',
  refreshToken: 'refreshToken',
  isVerified: 'isVerified',
  isDeactivated: 'isDeactivated',
  isDeleted: 'isDeleted',
  isSuspended: 'isSuspended',
  suspendMessage: 'suspendMessage',
  createdAt: 'createdAt'
};

exports.Prisma.CompanyScalarFieldEnum = {
  companyId: 'companyId',
  companyName: 'companyName',
  registrationDate: 'registrationDate',
  addressLine1: 'addressLine1',
  addressLine2: 'addressLine2',
  country: 'country',
  postalCode: 'postalCode',
  proposedShares: 'proposedShares',
  currency: 'currency',
  proposedShareCapital: 'proposedShareCapital',
  businessActivity1: 'businessActivity1',
  businessActivity1Desc: 'businessActivity1Desc',
  businessActivity2: 'businessActivity2',
  businessActivity2Desc: 'businessActivity2Desc',
  createdAt: 'createdAt',
  status: 'status',
  statusRemarks: 'statusRemarks',
  isDeleted: 'isDeleted',
  userId: 'userId',
  canEditC: 'canEditC',
  canEditD: 'canEditD',
  canEditS: 'canEditS'
};

exports.Prisma.CompanyStatusMessageScalarFieldEnum = {
  id: 'id',
  companyId: 'companyId',
  senderId: 'senderId',
  senderRole: 'senderRole',
  fromStatus: 'fromStatus',
  toStatus: 'toStatus',
  message: 'message',
  createdAt: 'createdAt'
};

exports.Prisma.DirectorScalarFieldEnum = {
  id: 'id',
  companyId: 'companyId',
  directorName: 'directorName',
  email: 'email',
  addressLine1: 'addressLine1',
  addressLine2: 'addressLine2',
  country: 'country',
  postalCode: 'postalCode',
  contactNumber: 'contactNumber',
  nationality: 'nationality',
  idType: 'idType',
  idExpiryDate: 'idExpiryDate',
  idNumber: 'idNumber',
  isShareholder: 'isShareholder',
  identityProof: 'identityProof',
  addressProof: 'addressProof',
  dateOfBirth: 'dateOfBirth',
  createdAt: 'createdAt'
};

exports.Prisma.ShareholderScalarFieldEnum = {
  id: 'id',
  companyId: 'companyId',
  shareholderName: 'shareholderName',
  email: 'email',
  type: 'type',
  addressLine1: 'addressLine1',
  addressLine2: 'addressLine2',
  country: 'country',
  postalCode: 'postalCode',
  contactNumber: 'contactNumber',
  nationality: 'nationality',
  idType: 'idType',
  idExpiryDate: 'idExpiryDate',
  idNumber: 'idNumber',
  dateOfBirth: 'dateOfBirth',
  numberOfShares: 'numberOfShares',
  shareCapitalAllocation: 'shareCapitalAllocation',
  createdAt: 'createdAt'
};

exports.Prisma.CompanyDocumentScalarFieldEnum = {
  id: 'id',
  companyId: 'companyId',
  documentLabel: 'documentLabel',
  documentPath: 'documentPath',
  documentType: 'documentType',
  purpose: 'purpose',
  thumbnail: 'thumbnail',
  uploadedAt: 'uploadedAt',
  isVerified: 'isVerified',
  uploadedBy: 'uploadedBy',
  uploadedRole: 'uploadedRole',
  uploadedFor: 'uploadedFor'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  companyId: 'companyId',
  userId: 'userId',
  stagingCompanyId: 'stagingCompanyId',
  paymentDate: 'paymentDate',
  amount: 'amount',
  currency: 'currency',
  paymentMethod: 'paymentMethod',
  paymentStatus: 'paymentStatus',
  paymentReference: 'paymentReference',
  services: 'services'
};

exports.Prisma.RefundScalarFieldEnum = {
  id: 'id',
  paymentId: 'paymentId',
  refundId: 'refundId',
  amount: 'amount',
  status: 'status',
  createdAt: 'createdAt'
};

exports.Prisma.ServiceScalarFieldEnum = {
  id: 'id',
  serviceName: 'serviceName',
  serviceDescription: 'serviceDescription',
  cost: 'cost',
  status: 'status',
  createdAt: 'createdAt'
};

exports.Prisma.CompanyServiceScalarFieldEnum = {
  id: 'id',
  companyId: 'companyId',
  serviceId: 'serviceId',
  updateDate: 'updateDate'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  title: 'title',
  message: 'message',
  isRead: 'isRead',
  createdAt: 'createdAt'
};

exports.Prisma.InsightRecommendationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  content: 'content',
  sampleDocUrls: 'sampleDocUrls',
  createdAt: 'createdAt'
};

exports.Prisma.CalendarActionScalarFieldEnum = {
  id: 'id',
  title: 'title',
  userId: 'userId',
  companyId: 'companyId',
  dueDate: 'dueDate',
  notes: 'notes',
  status: 'status',
  createdBy: 'createdBy',
  createdByRole: 'createdByRole'
};

exports.Prisma.ChatMessageScalarFieldEnum = {
  id: 'id',
  senderId: 'senderId',
  receiverId: 'receiverId',
  content: 'content',
  sentAt: 'sentAt'
};

exports.Prisma.DashboardStateScalarFieldEnum = {
  id: 'id',
  companyId: 'companyId',
  step: 'step',
  completedAt: 'completedAt'
};

exports.Prisma.RoleAssignmentScalarFieldEnum = {
  id: 'id',
  agentId: 'agentId',
  companyId: 'companyId',
  role: 'role',
  assignedAt: 'assignedAt'
};

exports.Prisma.ArticleScalarFieldEnum = {
  id: 'id',
  title: 'title',
  content: 'content',
  status: 'status',
  createdAt: 'createdAt',
  publishedAt: 'publishedAt',
  imagePath: 'imagePath',
  views: 'views',
  hashtag: 'hashtag'
};

exports.Prisma.ContactUsScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  phone: 'phone',
  subject: 'subject',
  details: 'details',
  status: 'status',
  ticketUpdate: 'ticketUpdate',
  createdAt: 'createdAt'
};

exports.Prisma.FAQScalarFieldEnum = {
  id: 'id',
  question: 'question',
  answer: 'answer'
};

exports.Prisma.StagingCompanyScalarFieldEnum = {
  id: 'id',
  companyName: 'companyName',
  contactEmail: 'contactEmail',
  contactNumber: 'contactNumber',
  isEmailVerified: 'isEmailVerified',
  isPaid: 'isPaid',
  isCompleted: 'isCompleted',
  isRejected: 'isRejected',
  step: 'step',
  registrationDate: 'registrationDate',
  directorData: 'directorData',
  shareholderData: 'shareholderData',
  servicesSelected: 'servicesSelected',
  createdAt: 'createdAt',
  razorpayOrderId: 'razorpayOrderId',
  emailOtp: 'emailOtp',
  emailOtpExpires: 'emailOtpExpires'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  actorId: 'actorId',
  role: 'role',
  action: 'action',
  target: 'target',
  companyId: 'companyId',
  timestamp: 'timestamp'
};

exports.Prisma.RegisteredCompanyNameScalarFieldEnum = {
  id: 'id',
  companyName: 'companyName',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.UserRole = exports.$Enums.UserRole = {
  Admin: 'Admin',
  preparer: 'preparer',
  approver: 'approver',
  client: 'client'
};

exports.CompanyStatus = exports.$Enums.CompanyStatus = {
  Draft: 'Draft',
  Submitted: 'Submitted',
  PreparerApproved: 'PreparerApproved',
  ApproverApproved: 'ApproverApproved',
  AdminApproved: 'AdminApproved',
  RevertedToClient: 'RevertedToClient',
  RevertedToPreparer: 'RevertedToPreparer',
  Completed: 'Completed'
};

exports.ShareholderType = exports.$Enums.ShareholderType = {
  Individual: 'Individual',
  Corporate: 'Corporate'
};

exports.DocumentType = exports.$Enums.DocumentType = {
  PDF: 'PDF',
  DOCX: 'DOCX',
  XLSX: 'XLSX',
  JPG: 'JPG',
  PNG: 'PNG'
};

exports.DocumentPurpose = exports.$Enums.DocumentPurpose = {
  MOA: 'MOA',
  AOA: 'AOA',
  ID_PROOF: 'ID_PROOF',
  ADDRESS_PROOF: 'ADDRESS_PROOF',
  BOARD_RESOLUTION: 'BOARD_RESOLUTION',
  INVOICE: 'INVOICE',
  OTHER: 'OTHER'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  Pending: 'Pending',
  Completed: 'Completed',
  Failed: 'Failed',
  Refunded: 'Refunded',
  Disputed: 'Disputed'
};

exports.RefundStatus = exports.$Enums.RefundStatus = {
  Requested: 'Requested',
  Processed: 'Processed',
  Failed: 'Failed'
};

exports.Prisma.ModelName = {
  User: 'User',
  Company: 'Company',
  CompanyStatusMessage: 'CompanyStatusMessage',
  Director: 'Director',
  Shareholder: 'Shareholder',
  CompanyDocument: 'CompanyDocument',
  Payment: 'Payment',
  Refund: 'Refund',
  Service: 'Service',
  CompanyService: 'CompanyService',
  Notification: 'Notification',
  InsightRecommendation: 'InsightRecommendation',
  CalendarAction: 'CalendarAction',
  ChatMessage: 'ChatMessage',
  DashboardState: 'DashboardState',
  RoleAssignment: 'RoleAssignment',
  Article: 'Article',
  ContactUs: 'ContactUs',
  FAQ: 'FAQ',
  StagingCompany: 'StagingCompany',
  AuditLog: 'AuditLog',
  RegisteredCompanyName: 'RegisteredCompanyName'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
